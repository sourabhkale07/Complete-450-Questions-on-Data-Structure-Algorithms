#include<iostream>
#include<stack>
#include<algorithm>
using namespace std;

struct interval{
    int start,end;
};

bool compareinterval(interval i1,interval i2){
    return(i1.start < i2.start);
}

void MergeIntervals(interval arr[],int n){
    if(n<=0){
        return;    // if no interval then return
    }
    
    stack<interval> s;    // stack which stores interval
    
    sort(arr,arr+n,compareinterval);     // sort the arr according to start time of interval
     
    s.push(arr[0]);              // push the first interval into the stack
    
    for(int i=1;i<n;i++){
        interval top = s.top();   
        
        if(top.end < arr[i].start){    // push if interval is mutually exclusive
            s.push(arr[i]);
        }
        
        else if (top.end < arr[i].end)              // update the top end time 
        {
            top.end = arr[i].end;
            s.pop();
            s.push(top);
        }
        
    }
    
    cout << " The Merged Intervals are: ";
    while (!s.empty())
    {
        interval t = s.top();
        cout << "[" << t.start << "," << t.end << "] ";
        s.pop();
    }
    return;
}



int main()
{
    interval arr[] =  { {6,8}, {1,9}, {2,4}, {4,7} };
    int n = sizeof(arr)/sizeof(arr[0]);
    MergeIntervals(arr,n);
    
	return 0;
}
